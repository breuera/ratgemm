#include <catch2/catch.hpp>
#include "BF16RatGemm.h"
#include "backend/ConvertMatrix.h"
#include <iostream>

/*
 * Rational test matrix consisting of 3x scaled and transposed stiffness matrices
 * for a degree basis used in the solver EDGE.
 */
double stiff_test[3][35][35] = {
  {
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,-94.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,10.5,-52.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,31.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.5,-73.5,0.0,0.0,84.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.5,-38.5,-17.5,0.0,-16.0,50.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.5,10.5,-42.0,0.0,1.5,-6.0,10.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,10.5,0.0,0.0,0.0,-30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,10.5,0.0,0.0,0.0,1.5,-21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.5,10.5,10.5,0.0,1.5,1.5,0.5,0.0,0.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,-54.0,0.0,0.0,81.0,0.0,0.0,0.0,0.0,0.0,-75.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,-39.0,-7.5,0.0,24.75,28.125,0.0,0.0,0.0,0.0,18.75,-46.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,-18.0,-18.0,0.0,-14.625,36.0,2.625,0.0,0.0,0.0,-3.125,10.0,-91.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,9.0,-31.5,0.0,2.25,-7.875,10.5,0.0,0.0,0.0,0.25,-0.875,10.5,-21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,4.5,0.0,0.0,0.0,-16.875,0.0,0.0,0.0,0.0,0.0,0.0,84.375,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,4.5,0.0,0.0,0.0,-9.0,-5.25,0.0,0.0,0.0,0.0,0.0,-7.5,61.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,4.5,0.0,0.0,0.0,1.125,-12.0,0.0,0.0,0.0,0.0,0.0,0.375,-4.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,-18.0,4.5,0.0,-14.625,-9.0,0.125,0.0,0.0,1.25,-3.125,-2.5,-4.375,0.0,0.0,0.0,0.0,-43.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.0,9.0,-9.0,0.0,2.25,-2.25,-3.25,0.0,0.0,1.25,0.25,-0.25,-3.25,-2.25,0.0,0.0,0.0,1.25,-11.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,15.0,0.0,0.0,0.0,3.75,3.75,0.0,0.0,0.0,0.0,0.0,1.25,1.25,0.25,0.0,0.0,1.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
  },
  {
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  7.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  3.75,-141.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -2.5,-10.5,-105.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,-47.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,5.25,-26.25,26.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,5.25,5.25,15.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.25,-110.25,0.0,0.0,126.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -1.5,38.5,-35.0,0.0,16.0,100.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  3.75,26.25,26.25,0.0,3.75,3.75,26.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-36.75,0.0,0.0,42.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-19.25,-8.75,8.75,-8.0,25.0,0.0,-25.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,-21.0,-15.75,0.75,-3.0,5.25,-2.25,-21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-19.25,1.75,5.25,-8.0,-5.0,0.0,-15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,-10.5,5.25,0.75,-1.5,-1.75,0.75,-10.5,3.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,5.25,10.5,0.75,0.75,0.25,1.5,1.5,2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.5,-81.0,0.0,0.0,121.5,0.0,0.0,0.0,0.0,0.0,-112.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -1.0,39.0,-15.0,0.0,-24.75,56.25,0.0,0.0,0.0,0.0,-18.75,-93.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,-45.0,11.25,0.0,-36.5625,-22.5,6.5625,0.0,0.0,0.0,-7.8125,-6.25,-229.6875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -2.0,-18.0,-63.0,0.0,-4.5,-15.75,-5.25,0.0,0.0,0.0,-0.5,-1.75,-5.25,-63.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-27.0,0.0,0.0,40.5,0.0,0.0,0.0,0.0,0.0,-37.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-19.5,-3.75,3.75,12.375,14.0625,0.0,-14.0625,0.0,0.0,9.375,-23.4375,0.0,0.0,70.3125,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,-9.0,-6.75,-7.3125,18.0,1.3125,13.5,-5.25,0.0,-1.5625,5.0,-45.9375,0.0,11.25,61.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-15.75,15.75,1.125,-3.9375,5.25,3.9375,10.5,0.0,0.125,-0.4375,5.25,-10.5,1.3125,3.5,10.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-19.5,0.75,2.25,12.375,-2.8125,0.0,-8.4375,0.0,0.0,9.375,4.6875,0.0,0.0,42.1875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,-4.5,2.25,-7.3125,9.0,-0.4375,-4.5,-2.625,0.875,-1.5625,2.5,15.3125,0.0,-3.75,30.625,0.0,-30.625,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-11.25,2.25,1.125,-2.8125,1.25,0.5625,-6.0,-2.5,0.125,-0.3125,1.25,4.5,0.1875,-2.0,4.5,-2.5,-9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,2.25,4.5,-7.3125,-4.5,0.0625,-9.0,0.375,0.625,-1.5625,-1.25,-2.1875,0.0,-7.5,-4.375,0.0,-21.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-4.5,4.5,1.125,-1.125,-1.625,1.125,-6.375,0.625,0.125,-0.125,-1.625,-1.125,0.375,-2.125,-1.125,0.625,-5.625,1.125,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,4.5,7.5,1.125,1.125,0.375,1.875,1.875,1.875,0.125,0.125,0.375,0.125,0.625,0.625,0.125,1.875,0.625,0.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
  },
  {
    {  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -6.25,-236.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,-47.25,-94.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,5.25,-42.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,-47.25,0.0,31.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,5.25,-26.25,5.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  1.25,5.25,5.25,15.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  8.25,110.25,0.0,0.0,252.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-36.75,73.5,0.0,42.0,105.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-19.25,-14.0,0.0,-8.0,40.0,20.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,-26.25,0.0,0.75,-3.75,11.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-36.75,0.0,-24.5,42.0,0.0,0.0,-35.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-19.25,-8.75,1.75,-8.0,25.0,0.0,-5.0,-20.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,-21.0,1.75,0.75,-3.0,5.25,0.25,-6.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,-19.25,1.75,5.25,-8.0,-5.0,0.0,-15.0,0.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,-10.5,5.25,0.75,-1.5,-1.75,0.75,-10.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.75,5.25,5.25,10.5,0.75,0.75,0.25,1.5,1.5,2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  -7.0,-189.0,0.0,0.0,-94.5,0.0,0.0,0.0,0.0,0.0,-262.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-27.0,-81.0,0.0,40.5,-67.5,0.0,0.0,0.0,0.0,-37.5,-112.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-19.5,-6.0,0.0,12.375,22.5,-16.875,0.0,0.0,0.0,9.375,-37.5,-196.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,-11.25,0.0,-7.3125,22.5,2.8125,0.0,0.0,0.0,-1.5625,6.25,-98.4375,-43.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-18.0,0.0,1.125,-4.5,7.875,0.0,0.0,0.0,0.125,-0.5,7.875,-28.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-27.0,0.0,27.0,40.5,0.0,0.0,22.5,0.0,0.0,-37.5,0.0,0.0,0.0,112.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-19.5,-3.75,0.75,12.375,14.0625,0.0,-2.8125,16.875,0.0,9.375,-23.4375,0.0,0.0,14.0625,65.625,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,-9.0,0.75,-7.3125,18.0,1.3125,-1.5,-1.5,0.0,-1.5625,5.0,-45.9375,0.0,-1.25,17.5,8.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-15.75,0.75,1.125,-3.9375,5.25,0.1875,-2.625,0.0,0.125,-0.4375,5.25,-10.5,0.0625,-0.875,3.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-19.5,0.75,2.25,12.375,-2.8125,0.0,-8.4375,0.0,-3.375,9.375,4.6875,0.0,0.0,42.1875,0.0,0.0,-39.375,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,-4.5,2.25,-7.3125,9.0,-0.4375,-4.5,-2.625,0.125,-1.5625,2.5,15.3125,0.0,-3.75,30.625,0.0,-4.375,-8.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-11.25,2.25,1.125,-2.8125,1.25,0.5625,-6.0,0.125,0.125,-0.3125,1.25,4.5,0.1875,-2.0,4.5,0.125,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,-9.0,2.25,4.5,-7.3125,-4.5,0.0625,-9.0,0.375,0.625,-1.5625,-1.25,-2.1875,0.0,-7.5,-4.375,0.0,-21.875,0.0,1.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,-4.5,4.5,1.125,-1.125,-1.625,1.125,-6.375,0.625,0.125,-0.125,-1.625,-1.125,0.375,-2.125,-1.125,0.625,-5.625,0.125,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
    {  0.5,4.5,4.5,7.5,1.125,1.125,0.375,1.875,1.875,1.875,0.125,0.125,0.375,0.125,0.625,0.625,0.125,1.875,0.625,0.875,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  },
  },
};

TEST_CASE( "my test" ) {
  // convert matrices to single precision and chop of zero blocks
  float l_stiff_fp32[3][35][20];

  for( int64_t l_di = 0; l_di < 3; l_di++ ) {
    for( int64_t l_n = 0; l_n < 35; l_n++ ) {
      for( int64_t l_m = 0; l_m < 20; l_m++ ) {
        l_stiff_fp32[l_di][l_n][l_m] = stiff_test[l_di][l_n][l_m];
      }
    }
  }

  int l_m_stiff = 35;
  int l_n_stiff = 3*20;

  // adjust data layout to single matrix with 3*M
  float l_stiff_single[35][3*20];
  for( int64_t l_di = 0; l_di < 3; l_di++ ) {
    for( int64_t l_n = 0; l_n < 35; l_n++ ) {
      for( int64_t l_m = 0; l_m < 20; l_m++ ) {
        int64_t l_m_single = l_di*20 + l_m;

        l_stiff_single[l_n][l_m_single] = l_stiff_fp32[l_di][l_n][l_m];
      }
    }
  }

  int l_m_dof = 9;
  int l_n_dof = 35;
  
  // generate random dofs
  float l_dofs[9][35] = { 0 };

  for( int64_t l_qt = 0; l_qt < l_m_dof; l_qt++ ) {
    for( int64_t l_md = 0; l_md < l_n_dof; l_md++ ) {
      l_dofs[l_qt][l_md] = (float) (rand()) / (float) (RAND_MAX) ;
    }
  }

  // Convert stiff to two BF16
  int64_t l_s_stiff = l_m_stiff * l_n_stiff;

  libxsmm_bfloat16* l_stiff_bf16_h1 = new libxsmm_bfloat16[l_s_stiff];
  libxsmm_bfloat16* l_stiff_bf16_h2 = new libxsmm_bfloat16[l_s_stiff];

  rat_gemm::backend::ConvertMatrix l_conv_stiff;
  l_conv_stiff.convert_fp32_two_bf16(l_stiff_single[0], l_stiff_bf16_h1, l_stiff_bf16_h2, l_s_stiff);

  rat_gemm::BF16RatGemm l_rat_stiff;
  std::vector<int64_t> l_nz_idx = l_rat_stiff.row_nz(l_stiff_bf16_h2, l_m_stiff, l_n_stiff);
  // for (int64_t idx : l_nz_idx) {
  //   std::cout << "Row " << idx << " is non-zero." << std::endl;
  // }

  std::vector<libxsmm_bfloat16> l_padded_stiff = l_rat_stiff.pad_rows(l_stiff_bf16_h1, l_stiff_bf16_h2, l_nz_idx, l_m_stiff, l_n_stiff);

  // l_rat_stiff.print_like_mat(l_padded_stiff, (l_m_stiff + l_nz_idx.size()), l_n_stiff);

  // Convert and extend DoFs for gemm
  int64_t l_s_dof = l_m_dof * l_n_dof;
  libxsmm_bfloat16* l_dof_bf16_h1 = new libxsmm_bfloat16[l_s_dof];
  libxsmm_bfloat16* l_dof_bf16_h2 = new libxsmm_bfloat16[l_s_dof];

  rat_gemm::backend::ConvertMatrix conv_dof;
  conv_dof.convert_fp32_two_bf16(l_dofs[0], l_dof_bf16_h1, l_dof_bf16_h2, l_s_dof);

  rat_gemm::BF16RatGemm l_rat_dof;
  std::vector<libxsmm_bfloat16> l_padded_dof_1 = l_rat_dof.pad_cols(l_dof_bf16_h1, l_dof_bf16_h1, l_nz_idx, l_m_dof, l_n_dof);
  std::vector<libxsmm_bfloat16> l_padded_dof_2 = l_rat_dof.pad_cols(l_dof_bf16_h2, l_dof_bf16_h2, l_nz_idx, l_m_dof, l_n_dof);
  
  // l_rat_dof.print_like_mat(l_padded_dof_1, l_m_dof, (l_n_dof + l_nz_idx.size()));

  libxsmm_bfloat16* l_dof_1 = l_padded_dof_1.data();
  libxsmm_bfloat16* l_dof_2 = l_padded_dof_2.data();
  libxsmm_bfloat16* l_stiff = l_padded_stiff.data();

  // l_result: matmul of 3 rational matrices with multiple DOFs after bf16.
  float* l_result = new float[l_m_dof * l_n_stiff];

  // int m = 9;
  // int n = 3 * 20;
  // int k = 35 + l_nz_idx.size();

  l_result = l_rat_stiff.bf16_gemm(l_dof_1, l_dof_2, l_stiff, l_m_dof, l_n_dof + l_nz_idx.size(), l_n_stiff);

  // std::cout << "\nDOF 1:" << std::endl;
  // l_rat_stiff.print_mat((libxsmm_bfloat16*)l_dof_1, l_m_dof, l_n_dof + l_nz_idx.size());
  // std::cout << "\nDOF 2:" << std::endl;
  // l_rat_stiff.print_mat((libxsmm_bfloat16*)l_dof_2, l_m_dof, l_n_dof + l_nz_idx.size());
  // std::cout << "\nstiff:" << std::endl;
  // l_rat_stiff.print_mat((libxsmm_bfloat16*)l_stiff, l_m_stiff + l_nz_idx.size(), l_n_stiff);

  std::cout << "\nresult:" << std::endl;
  for (int row = 0; row < l_m_dof; ++row) {
    for (int col = 0; col < l_n_stiff; ++col) {
      // Print the element value with a tab separator
      std::cout << l_result[row * l_n_stiff + col] << "   ";
    }
    // Move to the next row after printing all elements in the current row
    std::cout << std::endl;
  }
  std::cout << std::endl;
  std::cout << std::endl;
  std::cout << std::endl;
  std::cout << std::endl;

  // l_reference: real matmul of 3 rational matrices with multiple DOFs.
  float l_reference[9][3][35] = { 0 };

  for( int64_t l_di = 0; l_di < 3; l_di++ ) {
    for( int64_t l_m = 0; l_m < 35; l_m++ ) {
      for( int64_t l_n = 0; l_n < 9; l_n++ ) {
        for( int64_t l_k = 0; l_k < 35; l_k++ ) {
          l_reference[l_di][l_n][l_m] +=  stiff_test[l_di][l_k][l_m] * l_dofs[l_n][l_k];
        }
      }
    }
  }

  // std::cout << "\n reference:" << std::endl;
  // for (int i = 0; i < 9; ++i) {
  //   for (int j = 0; j < 3; ++j) {
  //     for (int k = 0; k < 35; ++k) {
  //       std::cout << l_reference[i][j][k] << "   ";
  //     }
  //      std::cout << std::endl;
  //   }
  // }

  for( int64_t l_di = 0; l_di < 3; l_di++ ) {
    for( int64_t l_n = 0; l_n < 9; l_n++ ) {
      for( int64_t l_m = 0; l_m < 20; l_m++ ) {
        int64_t l_id_rat = l_di*20 + l_m;
        // std::cout << l_result[l_n * l_m_dof + l_id_rat] << "\t";
        // REQUIRE( l_reference[l_di][l_n][l_m] == Approx(l_result[l_n * l_m_dof + l_id_rat]) );
      }
    }
  }

}